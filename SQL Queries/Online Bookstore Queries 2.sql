--How many books of each genre have been sold?
SELECT 
	b.genre,
	SUM(oi.quantity) AS total_sold
FROM order_items AS oi
LEFT JOIN books AS b
ON oi.product_id = b.book_id 
GROUP BY b.genre
ORDER BY total_sold DESC;

-- What is the average order value (AOV) for completed orders?
SELECT 
	ROUND(AVG(total_amount),2) AS completed_orders_AOV
FROM orders
WHERE status = 'Completed';

-- Which books generate the highest profit (sale price - cost)?
SELECT 
	b.book_name,
	SUM(oi.sale_price - b.cost) AS profit
FROM order_items AS oi
LEFT JOIN books AS b
ON oi.product_id = b.book_id
GROUP BY b.book_name 
ORDER BY profit DESC
LIMIT 10;

-- Are there any customers who have placed more than 3 orders but have never spent more than PHP 15,000 in total?
SELECT
	CONCAT(c.first_name, ' ', c.last_name) AS customer_name,
	COUNT(order_id) AS order_counts,
	SUM(total_amount) AS total_spent
FROM orders AS o
LEFT JOIN customers AS c
USING(customer_id)
GROUP BY customer_name
HAVING COUNT(order_id) > 3 AND SUM(total_amount) < 15000
ORDER BY total_spent DESC;

--Which books are frequently bought together (based on order data)?
SELECT
	oi1.product_id AS book1,
	b1.book_name AS book_name1,
	oi2.product_id AS book2,
	b2.book_name AS book_name2,
	COUNT(*) AS frequency
FROM order_items AS oi1
JOIN order_items AS oi2
ON oi1.order_id = oi2.order_id AND oi1.product_id < oi2.product_id
JOIN books AS b1
ON oi1.product_id = b1.book_id 
JOIN books AS b2
ON oi2.product_id = b2.book_id
GROUP BY book1, book2, b1.book_name, b2.book_name
ORDER BY frequency DESC
LIMIT 10;

-- How does stock quantity change over time for different shipping centers?
SELECT 
	sc.center_name AS shipping_center,
	i.stock_quantity AS stock_quantity,
	i.last_updated AS last_updated
FROM inventory AS i
JOIN shipping_centers as sc
USING(center_id)
ORDER BY stock_quantity;

-- Identify customers who havenâ€™t made a purchase in the last 6 months.
SELECT
	c.customer_id,
	MAX(o.order_date) AS last_order_date
FROM orders AS o
JOIN customers AS c
USING(customer_id)
GROUP BY c.customer_id
HAVING MAX(o.order_date) <= (SELECT MAX(o2.order_date) - INTERVAL '6 months' 
							  FROM orders AS o2);

-- What is the total number of orders placed in each month?
SELECT
	TO_CHAR(order_date, 'Month YYYY') AS order_month,
	COUNT(order_id) AS order_count
FROM orders
GROUP BY order_month
ORDER BY MIN(order_date);
	
-- Which customers have placed at least 3 orders?
SELECT
	CONCAT(c.first_name, ' ', c.last_name) AS customer_name,
	COUNT(order_id) AS order_count
FROM orders AS o
JOIN customers as c
USING(customer_id)
GROUP BY customer_name
HAVING COUNT(order_id) >= 3 
ORDER BY order_count ASC;

--What is the total revenue generated by each shipping center?
SELECT 
	sc.center_name AS shipping_center,
	SUM(o.total_amount) AS total_revenue
FROM orders AS o
JOIN shipping_centers AS sc
USING(center_id)
GROUP BY shipping_center
ORDER BY total_revenue DESC;

-- What percentage of total orders are currently "Completed" versus "Shipped"?
SELECT
	ROUND((COUNT(CASE WHEN status = 'Completed' THEN 1 END)*100.0/COUNT(*)),2) AS completed_percent,
	ROUND((COUNT(CASE WHEN status = 'Shipped' THEN 1 END)*100.0/COUNT(*)),2) AS shipped_percent
FROM orders

-- Get the percentage of total orders for each status.
SELECT status, 
       COUNT(order_id) AS order_count,
       (COUNT(order_id) * 100.0 / SUM(COUNT(order_id)) OVER ()) AS percentage
FROM Orders
GROUP BY status;

-- Which books have never been sold?
SELECT
	b.book_name
FROM books AS b
LEFT JOIN order_items AS oi
ON b.book_id = oi.product_id
WHERE oi.product_id IS NULL;

-- What is the reorder frequency of different books based on inventory data?
SELECT 
	b.book_name, 
	COUNT(i.inventory_id) AS reorder_count
FROM inventory i
JOIN books b 
ON i.product_id = b.book_id
WHERE i.stock_quantity < 50  -- let say 50 is the threshold to restock
GROUP BY b.book_name
ORDER BY reorder_count DESC;

--Which customers have spent more than the average customer spending?
SELECT
	CONCAT(c.first_name, ' ', c.last_name) AS customer_name,
	SUM(o.total_amount) AS total_spent
FROM orders as o
JOIN customers as c
USING(customer_id)
GROUP BY c.customer_id
HAVING SUM(o.total_amount) > (
	SELECT AVG(o1.total_amount)
	FROM orders as o1)
ORDER BY total_spent DESC;











	











	




